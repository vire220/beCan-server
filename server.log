2018-03-05T22:28:44.808Z - info: Starting Log
2018-03-05T22:28:44.875Z - info: Server started, listening on: 8080
2018-03-05T22:28:44.922Z - info: Connected to MongoDB
2018-03-05T22:29:39.096Z - info: Starting Log
2018-03-05T22:29:39.157Z - info: Server started, listening on: 8080
2018-03-05T22:29:39.200Z - info: Connected to MongoDB
2018-03-05T22:32:16.026Z - info: Starting Log
2018-03-05T22:32:16.092Z - info: Server started, listening on: 8080
2018-03-05T22:32:16.142Z - info: Connected to MongoDB
2018-03-05T22:32:32.824Z - info: Starting Log
2018-03-05T22:32:32.884Z - info: Server started, listening on: 8080
2018-03-05T22:32:32.931Z - info: Connected to MongoDB
2018-03-05T22:35:45.997Z - info: Starting Log
2018-03-05T22:35:46.059Z - info: Server started, listening on: 8080
2018-03-05T22:35:46.107Z - info: Connected to MongoDB
2018-03-05T22:37:03.169Z - info: Starting Log
2018-03-05T22:37:03.226Z - info: Server started, listening on: 8080
2018-03-05T22:37:03.274Z - info: Connected to MongoDB
2018-03-05T22:42:07.094Z - info: Starting Log
2018-03-05T22:42:07.158Z - info: Server started, listening on: 8080
2018-03-05T22:42:07.203Z - info: Connected to MongoDB
2018-03-05T22:47:33.851Z - info: Starting Log
2018-03-05T22:47:33.912Z - info: Server started, listening on: 8080
2018-03-05T22:47:33.956Z - info: Connected to MongoDB
2018-03-05T22:48:29.419Z - info: Starting Log
2018-03-05T22:48:29.483Z - info: Server started, listening on: 8080
2018-03-05T22:48:29.533Z - info: Connected to MongoDB
2018-03-05T22:49:23.980Z - info: Starting Log
2018-03-05T22:49:24.044Z - info: Server started, listening on: 8080
2018-03-05T22:49:24.090Z - info: Connected to MongoDB
2018-03-05T22:50:48.768Z - info: Starting Log
2018-03-05T22:50:48.828Z - info: Server started, listening on: 8080
2018-03-05T22:50:48.870Z - info: Connected to MongoDB
2018-03-05T22:52:38.590Z - info: Starting Log
2018-03-05T22:52:38.646Z - info: Server started, listening on: 8080
2018-03-05T22:52:38.689Z - info: Connected to MongoDB
2018-03-05T22:53:10.865Z - info: Starting Log
2018-03-05T22:53:10.927Z - info: Server started, listening on: 8080
2018-03-05T22:53:10.973Z - info: Connected to MongoDB
2018-03-05T22:59:04.547Z - info: Starting Log
2018-03-05T22:59:04.616Z - info: Server started, listening on: 8080
2018-03-05T22:59:04.665Z - info: Connected to MongoDB
2018-03-05T23:01:29.828Z - info: Starting Log
2018-03-05T23:01:29.888Z - info: Server started, listening on: 8080
2018-03-05T23:01:29.933Z - info: Connected to MongoDB
2018-03-05T23:01:39.997Z - info: Updating beacons for sequence Test Sequence 1, id: 5a9dcc53c0c71b11d0438f2e
2018-03-05T23:02:38.929Z - info: Starting Log
2018-03-05T23:02:38.989Z - info: Server started, listening on: 8080
2018-03-05T23:02:39.033Z - info: Connected to MongoDB
2018-03-05T23:03:25.578Z - info: Starting Log
2018-03-05T23:03:25.637Z - info: Server started, listening on: 8080
2018-03-05T23:03:25.682Z - info: Connected to MongoDB
2018-03-05T23:03:40.579Z - info: Updating beacons for sequence Test Sequence 1 - id: 5a9dcccc805b8a11f5bdb174
2018-03-05T23:06:48.782Z - info: Starting Log
2018-03-05T23:06:48.841Z - info: Server started, listening on: 8080
2018-03-05T23:06:48.884Z - info: Connected to MongoDB
2018-03-05T23:06:57.171Z - info: Updating beacons for sequence Test Sequence 1 - id: 5a9dcd914132b3120d8d9ec0
2018-03-05T23:06:57.172Z - info: 0
2018-03-05T23:07:26.381Z - info: Starting Log
2018-03-05T23:07:26.442Z - info: Server started, listening on: 8080
2018-03-05T23:07:26.490Z - info: Connected to MongoDB
2018-03-05T23:07:33.024Z - info: Updating beacons for sequence Test Sequence 1 - id: 5a9dcdb453d14412217acd5d
2018-03-05T23:07:33.029Z - info:  strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=205, 3=180, 4=83, 5=209, 6=68, 7=18, 8=33, 9=122, 10=205, 11=93, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, $ref=$, ownerDocument=undefined, fullPath=undefined, domain=null, save=function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, isNew=function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, _eventsCount=2, _maxListeners=0, $options=true, isNew=false, errors=undefined, name=Test Sequence 1, description=This is the first test sequence, content=Blah, blah, blah, html, blah..., beacons=[$ref=$["_doc"]["beacons"], $ref=$, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=205, 3=180, 4=83, 5=209, 6=68, 7=18, 8=33, 9=122, 10=205, 11=92, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, beaconId=require, , , , , beaconId=true, $ref=$["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$, fullPath=beacons, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function () {
    _this.constructor.emit('save', _this);
  }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function (val) {
    _this.isNew = val;
  }], _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, lat=51.0111, lon=-114.1318, description=Mount Royal University, beaconId=test_becan_1, name=Test Beacon 1, description=This is the first test beacon., content=There is all sorts of stuff here, and look - A Quiz!, clue=The beCan lies near a place Google calls home..., enabled=true, points=100, quiz=[$ref=$["_doc"]["beacons"][0]["_doc"]["quiz"], $ref=$["_doc"]["beacons"][0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=205, 3=180, 4=83, 5=209, 6=68, 7=18, 8=33, 9=122, 10=205, 11=91, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , $ref=$["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$, fullPath=beacons.quiz, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, question=1. How does eat food?, answers=[Nom, Munch, Chomp, All of the above], correctAnswer=All of the above, $ref=$["_doc"]["beacons"][0]["_doc"]["quiz"][0]["$__"]["_id"], $ref=$["_doc"]["beacons"][0]["_doc"]["quiz"], $ref=$["_doc"]["beacons"][0], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=205, 3=180, 4=83, 5=209, 6=68, 7=18, 8=33, 9=122, 10=205, 11=90, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , $ref=$["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$, fullPath=beacons.quiz, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, question=2. What am fire?, answers=[Such hot, Very burn, Many heat, All of the above], correctAnswer=All of the above, $ref=$["_doc"]["beacons"][0]["_doc"]["quiz"][1]["$__"]["_id"], $ref=$["_doc"]["beacons"][0]["_doc"]["quiz"], $ref=$["_doc"]["beacons"][0], __index=2, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=205, 3=180, 4=83, 5=209, 6=68, 7=18, 8=33, 9=122, 10=205, 11=89, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , $ref=$["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$, fullPath=beacons.quiz, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, question=3. What is hands?, answers=[Grab, 5, Scissors, All of the above], correctAnswer=All of the above, $ref=$["_doc"]["beacons"][0]["_doc"]["quiz"][2]["$__"]["_id"]], $ref=$["_doc"]["beacons"][0]["$__"]["_id"]], $ref=$["$__"]["_id"], __v=0
2018-03-05T23:07:33.040Z - info: 0
2018-03-05T23:08:20.378Z - info: Starting Log
2018-03-05T23:08:20.438Z - info: Server started, listening on: 8080
2018-03-05T23:08:20.480Z - info: Connected to MongoDB
2018-03-05T23:08:24.615Z - info: Updating beacons for sequence Test Sequence 1 - id: 5a9dcde810b9a21237c2ac6e
2018-03-05T23:08:24.621Z - info:  $ref=$, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=205, 3=232, 4=16, 5=185, 6=162, 7=18, 8=55, 9=194, 10=172, 11=110, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, $ref=$[0]["__parent"], ownerDocument=undefined, fullPath=undefined, domain=null, save=function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, isNew=function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, _eventsCount=2, _maxListeners=0, $options=true, isNew=false, errors=undefined, name=Test Sequence 1, description=This is the first test sequence, content=Blah, blah, blah, html, blah..., $ref=$, $ref=$[0]["__parent"]["$__"]["_id"], __v=0, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=205, 3=232, 4=16, 5=185, 6=162, 7=18, 8=55, 9=194, 10=172, 11=109, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, beaconId=require, , , , , beaconId=true, $ref=$[0]["__parent"]["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$[0]["__parent"], fullPath=beacons, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function () {
    _this.constructor.emit('save', _this);
  }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function (val) {
    _this.isNew = val;
  }], _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, lat=51.0111, lon=-114.1318, description=Mount Royal University, beaconId=test_becan_1, name=Test Beacon 1, description=This is the first test beacon., content=There is all sorts of stuff here, and look - A Quiz!, clue=The beCan lies near a place Google calls home..., enabled=true, points=100, quiz=[$ref=$[0]["_doc"]["quiz"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=205, 3=232, 4=16, 5=185, 6=162, 7=18, 8=55, 9=194, 10=172, 11=108, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , $ref=$[0]["__parent"]["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$[0]["__parent"], fullPath=beacons.quiz, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, question=1. How does eat food?, answers=[Nom, Munch, Chomp, All of the above], correctAnswer=All of the above, $ref=$[0]["_doc"]["quiz"][0]["$__"]["_id"], $ref=$[0]["_doc"]["quiz"], $ref=$[0], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=205, 3=232, 4=16, 5=185, 6=162, 7=18, 8=55, 9=194, 10=172, 11=107, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , $ref=$[0]["__parent"]["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$[0]["__parent"], fullPath=beacons.quiz, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, question=2. What am fire?, answers=[Such hot, Very burn, Many heat, All of the above], correctAnswer=All of the above, $ref=$[0]["_doc"]["quiz"][1]["$__"]["_id"], $ref=$[0]["_doc"]["quiz"], $ref=$[0], __index=2, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=205, 3=232, 4=16, 5=185, 6=162, 7=18, 8=55, 9=194, 10=172, 11=106, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , $ref=$[0]["__parent"]["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$[0]["__parent"], fullPath=beacons.quiz, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, question=3. What is hands?, answers=[Grab, 5, Scissors, All of the above], correctAnswer=All of the above, $ref=$[0]["_doc"]["quiz"][2]["$__"]["_id"]], $ref=$[0]["$__"]["_id"]
2018-03-05T23:08:24.633Z - info: 0
2018-03-05T23:11:45.349Z - info: Starting Log
2018-03-05T23:11:45.407Z - info: Server started, listening on: 8080
2018-03-05T23:11:45.449Z - info: Connected to MongoDB
2018-03-05T23:11:52.682Z - info: Updating beacons for sequence Test Sequence 1 - id: 5a9dceb862164e124e4169dd
2018-03-05T23:11:52.683Z - info: 
2018-03-05T23:11:52.683Z - info: 0
2018-03-05T23:16:13.552Z - info: Starting Log
2018-03-05T23:16:13.614Z - info: Server started, listening on: 8080
2018-03-05T23:16:13.658Z - info: Connected to MongoDB
2018-03-05T23:16:26.947Z - info: Updating beacons for sequence Test Sequence 1 - id: 5a9dcfca461dcb126195c98c
2018-03-05T23:16:26.955Z - info:  $ref=$, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=true, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=207, 3=202, 4=70, 5=29, 6=203, 7=18, 8=97, 9=149, 10=201, 11=140, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , stateNames=[require, modify, init, default, ignore], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, $ref=$[0]["__parent"], ownerDocument=undefined, fullPath=undefined, domain=null, save=function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, isNew=function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, _eventsCount=2, _maxListeners=0, $options=true, isNew=false, errors=undefined, name=Test Sequence 1, description=This is the first test sequence, content=Blah, blah, blah, html, blah..., $ref=$, $ref=$[0]["__parent"]["$__"]["_id"], __v=0, __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=207, 3=202, 4=70, 5=29, 6=203, 7=18, 8=97, 9=149, 10=201, 11=139, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, beaconId=require, , , , , beaconId=true, $ref=$[0]["__parent"]["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$[0]["__parent"], fullPath=beacons, domain=null, save=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function () {
    _this.constructor.emit('save', _this);
  }], isNew=[function notify(val) {
      var i = _this.length;
      while (i--) {
        if (!_this[i]) {
          continue;
        }
        switch (event) {
          // only swap for save event for now, we may change this to all event types later
          case 'save':
            val = _this[i];
            break;
          default:
            // NO-OP
            break;
        }
        _this[i].emit(event, val);
      }
    }, function (val) {
    _this.isNew = val;
  }], _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, lat=51.0111, lon=-114.1318, description=Mount Royal University, beaconId=test_becan_1, name=Test Beacon 1, description=This is the first test beacon., content=There is all sorts of stuff here, and look - A Quiz!, clue=The beCan lies near a place Google calls home..., enabled=true, points=100, quiz=[$ref=$[0]["_doc"]["quiz"], $ref=$[0], __index=0, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=207, 3=202, 4=70, 5=29, 6=203, 7=18, 8=97, 9=149, 10=201, 11=138, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , $ref=$[0]["__parent"]["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$[0]["__parent"], fullPath=beacons.quiz, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, question=1. How does eat food?, answers=[Nom, Munch, Chomp, All of the above], correctAnswer=All of the above, $ref=$[0]["_doc"]["quiz"][0]["$__"]["_id"], $ref=$[0]["_doc"]["quiz"], $ref=$[0], __index=1, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=207, 3=202, 4=70, 5=29, 6=203, 7=18, 8=97, 9=149, 10=201, 11=137, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , $ref=$[0]["__parent"]["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$[0]["__parent"], fullPath=beacons.quiz, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, question=2. What am fire?, answers=[Such hot, Very burn, Many heat, All of the above], correctAnswer=All of the above, $ref=$[0]["_doc"]["quiz"][1]["$__"]["_id"], $ref=$[0]["_doc"]["quiz"], $ref=$[0], __index=2, strictMode=true, selected=undefined, shardval=undefined, saveError=undefined, validationError=undefined, adhocPaths=undefined, removing=undefined, inserting=undefined, version=undefined, , _bsontype=ObjectID, 0=90, 1=157, 2=207, 3=202, 4=70, 5=29, 6=203, 7=18, 8=97, 9=149, 10=201, 11=136, populate=undefined, populated=undefined, wasPopulated=false, scope=undefined, , , , , , , $ref=$[0]["__parent"]["$__"]["activePaths"]["stateNames"], forEach=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, map=function () {
    var numArgs = arguments.length,
        states = utils.args(arguments, 0, numArgs - 1),
        callback = arguments[numArgs - 1];

    if (!states.length) states = this.stateNames;

    var _this = this;

    var paths = states.reduce(function(paths, state) {
      return paths.concat(Object.keys(_this.states[state]));
    }, []);

    return paths[iterMethod](function(path, i, paths) {
      return callback(path, i, paths);
    });
  }, , $ref=$[0]["__parent"], fullPath=beacons.quiz, domain=null, isNew=function (val) {
    _this.isNew = val;
  }, save=function () {
    _this.constructor.emit('save', _this);
  }, _eventsCount=2, _maxListeners=0, , isNew=false, errors=undefined, question=3. What is hands?, answers=[Grab, 5, Scissors, All of the above], correctAnswer=All of the above, $ref=$[0]["_doc"]["quiz"][2]["$__"]["_id"]], $ref=$[0]["$__"]["_id"]
2018-03-05T23:16:26.970Z - info: 0
2018-03-05T23:27:21.153Z - info: Starting Log
2018-03-05T23:27:21.214Z - info: Server started, listening on: 8080
2018-03-05T23:27:21.255Z - info: Connected to MongoDB
2018-03-05T23:34:07.125Z - info: Starting Log
2018-03-05T23:34:07.183Z - info: Server started, listening on: 8080
2018-03-05T23:34:07.224Z - info: Connected to MongoDB
2018-03-05T23:34:31.213Z - info: Starting Log
2018-03-05T23:34:31.282Z - info: Server started, listening on: 8080
2018-03-05T23:34:31.326Z - info: Connected to MongoDB
2018-03-05T23:35:25.192Z - info: Starting Log
2018-03-05T23:35:25.255Z - info: Server started, listening on: 8080
2018-03-05T23:35:25.294Z - info: Connected to MongoDB
2018-03-05T23:38:22.203Z - info: Starting Log
2018-03-05T23:38:22.266Z - info: Server started, listening on: 8080
2018-03-05T23:38:22.309Z - info: Connected to MongoDB
2018-03-05T23:41:59.481Z - info: Starting Log
2018-03-05T23:41:59.538Z - info: Server started, listening on: 8080
2018-03-05T23:41:59.579Z - info: Connected to MongoDB
2018-03-05T23:43:38.932Z - info: Starting Log
2018-03-05T23:43:38.995Z - info: Server started, listening on: 8080
2018-03-05T23:43:39.037Z - info: Connected to MongoDB
2018-03-05T23:44:00.581Z - info: Invalid request
2018-03-05T23:45:07.493Z - info: Invalid request
2018-03-06T04:24:08.450Z - info: Starting Log
2018-03-06T04:24:08.529Z - info: Server started, listening on: 8080
2018-03-06T04:24:08.571Z - info: Connected to MongoDB
2018-03-13T17:14:24.874Z - info: Starting Log
2018-03-13T17:14:25.059Z - info: Server started, listening on: 8080
2018-03-13T17:14:25.256Z - info: Connected to MongoDB
2018-03-13T17:15:13.494Z - info: Invalid request
2018-03-13T19:10:15.115Z - info: Invalid request
2018-03-14T01:56:02.417Z - info: Starting Log
2018-03-14T01:56:02.484Z - info: Server started, listening on: 8080
2018-03-14T01:56:02.527Z - info: Connected to MongoDB
2018-03-14T01:57:20.905Z - info: Starting Log
2018-03-14T01:57:20.961Z - info: Server started, listening on: 8080
2018-03-14T01:57:21.001Z - info: Connected to MongoDB
2018-03-14T02:20:52.234Z - info: Starting Log
2018-03-14T02:20:52.296Z - info: Server started, listening on: 8080
2018-03-14T02:20:52.341Z - info: Connected to MongoDB
2018-03-14T02:27:39.752Z - info: Starting Log
2018-03-14T02:27:39.815Z - info: Server started, listening on: 8080
2018-03-14T02:27:39.920Z - info: Connected to MongoDB
2018-03-14T02:28:05.514Z - info: Starting Log
2018-03-14T02:28:05.575Z - info: Server started, listening on: 8080
2018-03-14T02:28:05.616Z - info: Connected to MongoDB
2018-03-14T02:30:42.347Z - info: Starting Log
2018-03-14T02:30:42.405Z - info: Server started, listening on: 8080
2018-03-14T02:30:42.447Z - info: Connected to MongoDB
2018-03-14T02:30:48.680Z - info: Starting Log
2018-03-14T02:30:48.737Z - info: Server started, listening on: 8080
2018-03-14T02:30:48.785Z - info: Connected to MongoDB
2018-03-14T02:43:45.494Z - info: Starting Log
2018-03-14T02:43:45.554Z - info: Server started, listening on: 8080
2018-03-14T02:43:45.597Z - info: Connected to MongoDB
2018-03-14T02:43:52.431Z - info: Starting Log
2018-03-14T02:43:52.487Z - info: Server started, listening on: 8080
2018-03-14T02:43:52.534Z - info: Connected to MongoDB
2018-03-14T02:48:10.455Z - info: Starting Log
2018-03-14T02:48:10.519Z - info: Server started, listening on: 8080
2018-03-14T02:48:10.562Z - info: Connected to MongoDB
2018-03-14T03:12:20.949Z - info: Starting Log
2018-03-14T03:12:21.005Z - info: Server started, listening on: 8080
2018-03-14T03:12:21.059Z - info: Connected to MongoDB
2018-03-14T03:24:25.442Z - info: Starting Log
2018-03-14T03:24:25.491Z - info: Server started, listening on: 8080
2018-03-14T03:24:25.534Z - info: Connected to MongoDB
